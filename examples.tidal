-- code from residency at research and development

mySynth $ slowcat [
  every 7 (striate 16)$ slow 2 $ every 6 (twist 0.25 1.0 16)$ (0.045 ~>) $ slowcat [n "[5([5 4 7]/3,8), 4/8, 7([5 6 7]3,8), 8([5 3]/3,8), 2/4]"],
  n " 5 ~ ~ ~"
  ]

mySynth $ n "5([7 5 3 4]/3,8)"

mySynth3 $ slow 2 $ (0.045 ~>) $ n "25 41 73 3 8 9"

-- audio

d1 $ every 6 (twist 0.0 0.5 16)$dip $ seqPLoop [
(0,16, pop4 0.125 0.5 $ sound "guitarloop:2" # speed 0.7 # release 0.1 # gain 1.5 # cut 2 # room 0.0),
(16,18, pop4 0.125 1.5 $ sound "guitarloop:3" # speed 0.6 # release 0.1 # gain 1.5 # cut 2 # room 0.0),
(18,20, pop4 0.0125 1.2 $ sound "guitarloop:2(3,8)" # speed 1.6 # release 0.1 # gain 1.5 # cut 2 # room 0.0)
]

t1 (anticipateIn 8) $ sound "~ ~ ~ ~"
d2 $ dip $whenmod 8 7 (0.25 ~>)$ every 6 (twist 0.25 0.75 16 )$ fuk $ sound "[feel:6([5 4 3]/3,8),glitch:2([3 4]5,8)]" # gain 1.5 # cut 2

d3 $ fuk $ whenmod 16 14 (const $ sound "feel:5(3,8)" # speed 1.7) $ sound "feel:5(5,8)"

-- examples of styles of code to mess with

d1 $ sound "bd" # n "3"
d1 $ sound "[bd bd] [sd sd sd sd]"
-- To specify a group where only one step is played per cycle, use angle brackets. For example:


d3 $ sound "pad:1(5,11,2)" # speed 0.7 # release 4 # gain 0.75
d3 $ silence

d1 $ every 6 (stut 8 0.75 0.5)$ seqPLoop [
  (0,8, pop4 0.125 1.2 $ sound "[pad:1(3,8,5), <feel:1*2 feel:4? feel:5>]" # cut 2 # speed 0.5 # room 0.0),
  (8,16,pop4 0.125 1.7 $ sound "[feel:6([5 4 3]/3,8),pad:1(3,8), <feel:1*2 feel:4? feel:5>]" # cut 2 # speed 0.5 # room 0.0),
  (16, 18, sound "{glitch:2*4, bd(4,7)}" # cut 2)
  ]




d1 $ $ slow 4 $ striate 16 $ sound "research:11 research:9 research:8 research:7" # gain 0.5




d1 $ sound "bd*4" # gain (every 3 (rev) $ "1 0.8 0.5 0.7")
-- You can specify the effect before the sound pattern:
d1 $ gain "1 0.8 0.5 0.7" # sound "bd"
-- You can also add a third parameter, which ‘rotates’ the pattern so it starts on a different step:
d1 $ sound "bd(5,8,2)"

-- You use curly brace syntax to create a polymeter rhythm:
d1 $ sound "{bd hh sn cp, arpy bass2 drum notes can}" -- 5 played over the 4 beat pattern on the left

-- Sometimes you might want to create an odd polymeter rhythm without having to explicitly create a base rhythm.
-- You could do this with rests:
d1 $ sound "{~ ~ ~ ~, noiz:2 bass drum notes hh}"

d1 $ every 12 (const $ sound "bd*4 sn*2") $ sound "bd sn bass2 sn" -- const used with every instead of whenmod

d1 $ sound "bd*2 [bd [sn sn*2 sn] sn]"
   # speed ((*2) <$> sine) # gain 1.5
-- The above applies the function (* 2) (which simply means multiply by two),
-- to all the values inside the sine pattern.

-- equivalent to: d1 $ every 3 (fast 2) $ every 4 (fast 2) $ every 5 (fast 2) $ sound "bd sn kurt"
d1 $ foldEvery [3, 4, 5] (fast 2) $ sound "bd sn kurt"
